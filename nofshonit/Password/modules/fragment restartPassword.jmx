<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller restartPassword" enabled="true"/>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="link checker" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.io.FileWriter;
import java.util.Arrays;
import java.io.Writer;
import java.util.List;
import java.nio.charset.StandardCharsets;
import java.io.*; 

class LineChanger{
	String pathToFile;
	String CSVFile;
	
	LineChanger(String pathToFile, String CSVFile){
		this.pathToFile = pathToFile;
		this.CSVFile = CSVFile;
	}
	public void changeLine(int lineNumber, String data) throws IOException {
    Path path = Paths.get(pathToFile,CSVFile);
    List&lt;String&gt; lines = Files.readAllLines(path, StandardCharsets.UTF_8);
    lines.set(lineNumber - 1, data);
    Files.write(path, lines, StandardCharsets.UTF_8);
		}
	}

LineChanger LineChangerPassword = new LineChanger(&quot;C:/GitHub/nofshonitjmeterci/nofshonit/CSV Files&quot;, &quot;currentPassword.csv&quot;);
vars.putObject(&apos;LineChangerPassword&apos;,LineChangerPassword);
props.put(&apos;LineChangerPassword&apos;,LineChangerPassword);

</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV getEmail" enabled="true">
            <stringProp name="filename">C:/GitHub/nofshonitjmeterci/nofshonit/CSV Files/email.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV getcurrentPassword" enabled="true">
            <stringProp name="filename">C:/GitHub/nofshonitjmeterci/nofshonit/CSV Files/currentPassword.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random password" enabled="true">
            <stringProp name="variableName">newPassword</stringProp>
            <stringProp name="outputFormat">Hello_0000</stringProp>
            <stringProp name="minimumValue">1</stringProp>
            <stringProp name="maximumValue">9999</stringProp>
            <stringProp name="randomSeed"></stringProp>
            <boolProp name="perThread">false</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV getId" enabled="true">
            <stringProp name="filename">C:/GitHub/nofshonitjmeterci/nofshonit/CSV Files/id.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">organizationId</stringProp>
                <stringProp name="Header.value">${organizationId}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Recover Password" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;email&quot;:&quot;${Email}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${site}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/users/recoverPassword</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper;

def failureMessage = &quot;&quot;;
def jsonResponse = null;

JsonSlurper JSON = new JsonSlurper ();
def checker = vars.getObject(&apos;JsonChecker&apos;);

	try {
	    jsonResponse = JSON.parseText(prev.getResponseDataAsString());
	    } catch (Exception e) {
	    failureMessage += &quot;Invalid JSON.\n&quot;
	    AssertionResult.setFailureMessage(failureMessage);
	    AssertionResult.setFailure(true);  
	}
	
	checker.getStatusCode(prev,&quot;200&quot;);
	checker.ConfigStatusAndData(jsonResponse);
	checker.getStatusHeader(jsonResponse.get(&apos;status&apos;));
	checker.dataIsString(jsonResponse.get(&apos;data&apos;),&quot;tokenCode&quot;,&quot;the message dosent contain the right fields&quot;);
	failureMessage = checker.getFailureMassage();
	
	String message = jsonResponse.get(&apos;data&apos;);
	String [] words = message.split(&apos;=&apos;);
	String [] token = words[1].split(&apos;&amp;&apos;);
	if(token[0] == null || words[2] == null){
		failureMessage += &quot;the tokencode and member id returned with null values&quot;;
	}
	vars.put(&apos;forgotPasswordToken&apos;,token[0]);
	vars.putObject(&apos;id&apos;,words[2]);
	props.put(&apos;forgotPasswordToken&apos;,token[0]);
	//props.put(&apos;id&apos;,words[2]);
		
	// Print error messages if any
	if (failureMessage?.trim()) {
	    failureMessage += &quot;at URL : \n &quot; + SampleResult.getURL() + &quot;\n\n&quot;;     
	    //failureMessage += &quot;JSON RESPONSE: &quot; + jsonResponse + &quot;\n\n&quot;;
	    failureMessage += &quot;REQUEST HEADERS \n: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;;
	    failureMessage += &quot;THE SENT REQUEST \n&quot; + (sampler.getArguments().getArgument(0));
	
	    AssertionResult.setFailureMessage(failureMessage);
	    AssertionResult.setFailure(true);    
	}
	</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Critical Section Controller" enabled="true">
            <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
          </CriticalSectionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Reset Password" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
	&quot;neworupdate&quot;: 3,&#xd;
	&quot;newpassword&quot;:&quot;${newPassword}&quot;,&#xd;
	&quot;ForgotPasswordToken&quot;:&quot;${forgotPasswordToken}&quot;,&#xd;
	&quot;memberid&quot;:&quot;${id}&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${site}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/users/UpdatePassword</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JDBCPostProcessor guiclass="TestBeanGUI" testclass="JDBCPostProcessor" testname="JDBC PostProcessor" enabled="true">
                <stringProp name="dataSource">test</stringProp>
                <stringProp name="query">select top 1 PasswordChanged from NofshonitClub..AllMembers  where MemberId = &apos;${id}&apos; order by RegistrationDate desc</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">currentPasswordChange</stringProp>
              </JDBCPostProcessor>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.JsonSlurper;

def failureMessage = &quot;&quot;;
def jsonResponse = null;
String message = null;


JsonSlurper JSON = new JsonSlurper ();
def LineChanger = vars.getObject(&apos;LineChangerPassword&apos;);
def checker = vars.getObject(&apos;JsonChecker&apos;);

	try {
	    jsonResponse = JSON.parseText(prev.getResponseDataAsString());
	    } catch (Exception e) {
	    failureMessage += &quot;Invalid JSON.\n&quot;
	    AssertionResult.setFailureMessage(failureMessage);
	    AssertionResult.setFailure(true);  
	}
	
	checker.getStatusCode(prev,&quot;200&quot;);
	checker.getStatusHeader(jsonResponse.get(&apos;status&apos;));
	vars.putObject(&apos;statusResult&apos;,jsonResponse.get(&apos;status&apos;));
	checker.ConfigStatusAndData(jsonResponse);
	checker.dataIsLazyMap(jsonResponse.get(&apos;data&apos;),&quot;id firstName lastName token &quot;, &quot;the resetPassword response doesn&apos;t contain the right properties&quot;);
	checker.databaseNotEquals(props.get(&apos;firstPasswordChange&apos;),vars.get(&apos;currentPasswordChange_1&apos;),&apos;the database was not updated for password change&apos;);
	failureMessage = checker.getFailureMassage();	
	
	// Print error messages if any
	if (failureMessage?.trim()) {
	    failureMessage += &quot;at URL : \n &quot; + SampleResult.getURL() + &quot;\n\n&quot;;     
	    //failureMessage += &quot;JSON RESPONSE: &quot; + jsonResponse + &quot;\n\n&quot;;
	    failureMessage += &quot;REQUEST HEADERS \n: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;;
	    failureMessage += &quot;THE SENT REQUEST \n&quot; + (sampler.getArguments().getArgument(0));
	
	    AssertionResult.setFailureMessage(failureMessage);
	    AssertionResult.setFailure(true);    
	}


	if(jsonResponse.get(&apos;status&apos;)){
		 LineChanger.changeLine(2,vars.getObject(&apos;newPassword&apos;));
	}


	</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Token And LastPasswordChange JDBC" enabled="true">
              <stringProp name="IncludeController.includepath">C:\GitHub\nofshonitjmeterci\nofshonit\JDBC TestFragments\extractLastPasswordChangeJDBC.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">400</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="IfController.condition">${JMeterThread.last_sample_ok}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="replace old password in csv files" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">
def LineChanger = props.get(&apos;LineChangerPassword&apos;);
LineChanger.changeLine(2,vars.get(&apos;newPassword&apos;));

</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
