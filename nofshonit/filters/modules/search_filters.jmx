<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="false"/>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="יצירת משתנה חיפוש גייסון" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.*
import groovy.json.JsonBuilder

int [] catbuilder = [0];
def builder = new groovy.json.JsonBuilder();
	builder{
		     amountPerPage 21
		     pageNumber  1
		     priceSort 0
		     categoryTagIDs  catbuilder
	}
vars.put(&quot;builder&quot;,builder.toPrettyString());</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="הוספת טווח מחירים" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.*
import groovy.json.JsonBuilder;
import groovy.json.JsonSlurper;

long maxPrice = (Math.abs(new Random().nextInt() % 5) + 1)*100;
maxPrice = maxPrice == 500? -1:maxPrice;
long minPrice = maxPrice ==-1? 500:maxPrice -100;
if(minPrice &gt; maxPrice &amp;&amp; maxPrice != -1){
	minPrice = maxPrice -100;
}

def json = new JsonSlurper().parseText(vars.get(&apos;builder&apos;));

json &lt;&lt; [priceMax:maxPrice,PriceMin:minPrice] // json.put(&apos;sig&apos;, &apos;&lt;value&gt;&apos;)
//log.info(JsonOutput.toJson(json))
vars.put(&apos;builder&apos;,new JsonBuilder(json).toPrettyString());
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="הוספת כשרות" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.*
import groovy.json.JsonBuilder;
import groovy.json.JsonSlurper;
int areas = (Math.abs(new Random().nextInt() % 3));
if(areas == 0){return;}
ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;(areas);
for (int i = 1; i &lt;= areas; ++i){ //to generate from 0-10 inclusive. 
                               //For 0-9 inclusive, remove the = on the &lt;=
    a.add(i);
}
Collections.shuffle(a);

def json = new JsonSlurper().parseText(vars.get(&apos;builder&apos;));
json &lt;&lt; [kosherTypes:a] 
log.info(JsonOutput.toJson(json))
vars.put(&apos;builder&apos;,new JsonBuilder(json).toPrettyString());
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="הוספת אזור" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import groovy.json.*
import groovy.json.JsonBuilder;
import groovy.json.JsonSlurper;
int areas = (Math.abs(new Random().nextInt() % 5));
if(areas == 0){return;}
ArrayList&lt;Integer&gt; a = new ArrayList&lt;&gt;(areas);
for (int i = 1; i &lt;= areas; ++i){ //to generate from 0-10 inclusive. 
                               //For 0-9 inclusive, remove the = on the &lt;=
    a.add(i);
}
Collections.shuffle(a);

def json = new JsonSlurper().parseText(vars.get(&apos;builder&apos;));
json &lt;&lt; [regions:a] 
//log.info(JsonOutput.toJson(json))
vars.put(&apos;builder&apos;,new JsonBuilder(json).toPrettyString());
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">4000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="שליפת ווריאנטים" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${builder}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${site}</stringProp>
          <stringProp name="HTTPSampler.port">${site}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/category/getCategoryFilterPage</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import groovy.json.JsonSlurper;

def failureMessage = &quot;&quot;;
def jsonResponse = null;
String message = null;
def catagoryLevel = null;

JsonSlurper JSON = new JsonSlurper ();
def checker = vars.getObject(&apos;JsonChecker&apos;);
//def checker = props.get(&apos;JsonChecker&apos;);
	try {
      jsonResponse = JSON.parseText(prev.getResponseDataAsString());
      } catch (Exception e) {
	    failureMessage += &quot;Invalid JSON.\n&quot;
	    AssertionResult.setFailureMessage(failureMessage);
	    AssertionResult.setFailure(true);  
	}
	
	checker.getStatusCode(prev,&quot;200&quot;);
	checker.getStatusHeader(jsonResponse.get(&apos;status&apos;));
	checker.ConfigStatusAndData(jsonResponse);
	catagoryLevel = jsonResponse.get(&apos;data&apos;);
	Objects.requireNonNull(catagoryLevel, &quot;jsonData returned with null value&quot;);
	catagoryLevel = catagoryLevel.get(&apos;filterDataDTOs&apos;);
	//log.info(catagoryLevel[0]);
	//checker.dataIsLazyMap(catagoryLevel,&quot;categoriesCount stripName&quot;,&quot;the catagories filter dosent contain the required key values\n\n&quot;);
  checker.ArrayRequiredFields(catagoryLevel,[&quot;categoriesCount&quot;,&quot;stripName&quot;],&quot;the catagories filter dosent contain the required key values\n\n&quot;);
	//catagoryLevel = catagoryLevel.get(&apos;innerFilterData&apos;);
	catagoryLevel = catagoryLevel[0];
	catagoryLevel = catagoryLevel.get(&apos;innerFilterData&apos;);
	catagoryLevel = catagoryLevel.get(&apos;categories&apos;)[0];


   checker.dataIsLazyMap(catagoryLevel,&quot; categoryId category images minPrice maxPrice businessesCount&quot;,&quot;displayed catagories fail to contain the following values\n\n&quot;);
     checker.dataIsLazyMap(catagoryLevel.get(&apos;category&apos;),&quot; categoryId categoryName images&quot;,&quot;displayed catagories fail to contain the following values\n\n&quot;);

	failureMessage = checker.getFailureMassage();	
	// Print error messages if any
		if (failureMessage?.trim()) {
	    failureMessage += &quot;at URL \n: &quot; + SampleResult.getURL() + &quot;\n\n&quot;;     
	    //failureMessage += &quot;JSON RESPONSE: &quot; + jsonResponse + &quot;\n\n&quot;;
	    failureMessage += &quot;REQUEST HEADERS \n: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;;
	    failureMessage += &quot;THE SENT REQUEST \n&quot; + (sampler.getArguments().getArgument(0));
	    vars.putObject(&apos;error&apos;,true);
	    AssertionResult.setFailureMessage(failureMessage);
	    AssertionResult.setFailure(true);    
	}
	</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
